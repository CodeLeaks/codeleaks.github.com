<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | My Octopress Blog]]></title>
  <link href="http://CodeLeaks.github.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://CodeLeaks.github.com/"/>
  <updated>2012-01-04T19:07:14+08:00</updated>
  <id>http://CodeLeaks.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenGL ES 06 - 3D 中的物体]]></title>
    <link href="http://CodeLeaks.github.com/blog/2010/08/26/opengl-es-06-objects-in-3d/"/>
    <updated>2010-08-26T00:00:00+08:00</updated>
    <id>http://CodeLeaks.github.com/blog/2010/08/26/opengl-es-06-objects-in-3d</id>
    <content type="html"><![CDATA[<p>原作： Simon Maurice</p>

<p>到目前为止，我们在 2D 上已经花了不少时间，是该来看看 3D 的物体了。不过 3D 物体也不是特别复杂，它们只是比 2D 需要更多顶点信息（如果你用顶点数组来创建），或者如果你是用多个正方形拼成一个正方体的话就需要多一点变换。</p>

<p>其实我本来应该先把点和线讲掉的，不过，既然我们都已经能画出有颜色的三角形和有纹理的正方形了，也不急着关心那些无趣的形状了吧！</p>

<p>不过我确实需要回到变换那块讲讲旋转的一些细节。然后还有就是些我之前没提到的很基本的内容……好吧，其实这只是告诉你我要写很多很多教程！（也意味着我要翻很多很多教程！）</p>

<h3>开始之前，清空我们的 drawView 方法</h3>


<p>对之前的硬编码的内容挥挥手说再见吧，这次我们要把所有东西都砍掉，然后恢复到 drawView 方法最基本的状态。</p>

<p>我们的 drawView 应该是这样的：</p>

<p>```
- (void)drawView {</p>

<pre><code>// Our new object definition code goes here
[EAGLContext setCurrentContext:context];
glBindFramebufferOES(GL_FRAMEBUFFER_OES, viewFramebuffer);
glViewport(0, 0, backingWidth, backingHeight);
glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
glMatrixMode(GL_MODELVIEW);

// Our new drawing code goes here
glBindRenderbufferOES(GL_RENDERBUFFER_OES, viewRenderbuffer);
[context presentRenderbuffer:GL_RENDERBUFFER_OES];
[self checkGLError:NO];
</code></pre>

<p>}
```</p>

<p>掌声可以响起来了，要不是之前我就把所有东西都按着 3D 的要求弄好了现在我们就应该在弄深度缓冲什么的，还要加一堆新代码。现在上面的代码你应该已经相当熟悉了。</p>

<h3>定义 3D 对象</h3>


<p>我们要弄一个正方体出来，因为这东西在 3D 图形中很常见，而且旋转起来的效果也很带感。当然在画正方体之前，我们得知道 3D 的正方体是由 6 个正方形组成的，而正方形则是我们一直用到现在的。这边的定义其实很简单，不过我来把它分解开来。首先看看正面：</p>

<p>```
const GLfloat cubeVertices[] = {</p>

<pre><code>// Define the front face
-1.0, 1.0, 1.0,     // top left
-1.0, -1.0, 1.0,    // bottom left
1.0, -1.0, 1.0,     // bottom right
1.0, 1.0, 1.0,      // top right
</code></pre>

<p>```</p>

<p>基本上就和原始的正方形定义一样，只不过我把这个面往前提了一个单位。在教程末尾我会解释这是为什么的。接下来是顶面：</p>

<p>```</p>

<pre><code>// Top face
-1.0, 1.0, -1.0,    // top left (at rear)
-1.0, 1.0, 1.0,     // bottom left (at front)
1.0, 1.0, 1.0,      // bottom right (at front)
1.0, 1.0, -1.0,     // top right (at rear)
</code></pre>

<p>```</p>

<p>注意，我在画顶面的时候不仅顺序和正面一样（从背面看过去都是逆时针方向），而且连起始点也是一样的。如果最后我们把整个正方体绕 X 轴转 90º 的话那么顶面就变成正面了。我们定义的第一个点是左上顶点，然后是左下顶点，依次类推。</p>

<p>接下来，背面：</p>

<p>```</p>

<pre><code>// Rear face
1.0, 1.0, -1.0,     // top right (when viewed from front)
1.0, -1.0, -1.0,    // bottom right
-1.0, -1.0, -1.0,   // bottom left
-1.0, 1.0, -1.0,    // top left
</code></pre>

<p>```</p>

<p>注意到顶点顺序以及起始点的一致性了吗？我们在剩下的几个面里都这么干：</p>

<p>```</p>

<pre><code>// Bottom Face
-1.0, -1.0, 1.0,    // Bottom left front
1.0, -1.0, 1.0,     // right front
1.0, -1.0, -1.0,    // right rear
-1.0, -1.0, -1.0,   // left rear
</code></pre>

<p>```</p>

<p>没错，还是一样的顺序和一样的起始点。想象下把这个面转到正面后顶点是怎么排列的。</p>

<p>最后就是左面和右面：</p>

<p>```</p>

<pre><code>// Left face
-1.0, 1.0, -1.0,    // top left
-1.0, 1.0, 1.0,     // top right
-1.0, -1.0, 1.0,    // bottom right
-1.0, -1.0, -1.0,   // bottom left
// Right face
1.0, 1.0, 1.0,      // top left
1.0, 1.0, -1.0,     // top right
1.0, -1.0, -1.0,    // right
1.0, -1.0, 1.0      // left
</code></pre>

<p>};
```</p>

<p>这里是正方体的完整定义：</p>

<p>```
const GLfloat cubeVertices[] = {</p>

<pre><code>// Define the front face
-1.0, 1.0, 1.0,     // top left
-1.0, -1.0, 1.0,    // bottom left
1.0, -1.0, 1.0,     // bottom right
1.0, 1.0, 1.0,      // top right
// Top face
-1.0, 1.0, -1.0,    // top left (at rear)
-1.0, 1.0, 1.0,     // bottom left (at front)
1.0, 1.0, 1.0,      // bottom right (at front)
1.0, 1.0, -1.0,     // top right (at rear)
// Rear face
1.0, 1.0, -1.0,     // top right (when viewed from front)
1.0, -1.0, -1.0,    // bottom right
-1.0, -1.0, -1.0,   // bottom left
-1.0, 1.0, -1.0,    // top left
// Bottom Face
-1.0, -1.0, 1.0,    // Bottom left front
1.0, -1.0, 1.0,     // right front
1.0, -1.0, -1.0,    // right rear
-1.0, -1.0, -1.0,   // left rear
// Left face
-1.0, 1.0, -1.0,    // top left
-1.0, 1.0, 1.0,     // top right
-1.0, -1.0, 1.0,    // bottom right
-1.0, -1.0, -1.0,   // bottom left
// Right face
1.0, 1.0, 1.0,      // top left
1.0, 1.0, -1.0,     // top right
1.0, -1.0, -1.0,    // right
1.0, -1.0, 1.0      // left
</code></pre>

<p>};
```</p>

<p>如果你对坐标系统还有问题的话，你得下点功夫想象一下它的形状了。如果想象不出来，那么拿张纸来，用斜 45º 的方式把物体画下来。你得知道一个 3D 的物体是什么样的。</p>

<p>把 cubeVertices 的定义放在新的物体定义这一行注释下面。</p>

<p>好的，现在我们需要把这东西画出来。</p>

<h3>绘制正方体</h3>


<p>最简单的办法就是用你们之前已经见过的代码来画正方体。后面我们会用一些进阶的方法（不过一旦看懂了就是简单到无法啊）来画 3D 对象。现在的话还是让我先来介绍下 3D 里的绘图。</p>

<p>我们以一段“你懂的”代码来开始。在新绘图代码部分加入下列行：</p>

<p><code>
glLoadIdentity();
glTranslatef(0.0, 0.0, -6.0);
glVertexPointer(3, GL_FLOAT, 0, cubeVertices);
glEnableClientState(GL_VERTEX_ARRAY);
</code></p>

<p>这边没啥新鲜的。我们把顶点状态复位，把正方体往后移好让我们能看见，告诉 OpenGL 我们的顶点数组和格式，然后启用 OpenGL 的状态来使用它。</p>

<p>接下来的代码也基本上和你之前用到的一样：</p>

<p><code>
// Draw the front face in Red
glColor4f(1.0, 0.0, 0.0, 1.0);
glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
</code></p>

<p>也没有什么新鲜的玩意。我们把绘制颜色改成红色，然后让 OpenGL 画我们数组中的顶点 0 到顶点 4。画好之后我们来画顶面，也就是数组中的后 4 个顶点：</p>

<p><code>
// Draw the top face in green
glColor4f(0.0, 1.0, 0.0, 1.0);
glDrawArrays(GL_TRIANGLE_FAN, 4, 4);
</code></p>

<p>看一下 glDrawArrays()，如果你记得我之前说过的，你应该想得起来，第二个参数表示起始的偏移量。因为我们画的是正方体中的第二个面，所以我们要告诉 OpenGL 先加上一个 4 的偏移量（就是 cubeVertices[4]，前面 4 个顶点是正面），然后再画四个顶点。</p>

<p>现在让我们来画背面：</p>

<p>```
// Draw the rear face in Blue
glColor4f(0.0, 0.0, 1.0, 1.0);
glDrawArrays(GL_TRIANGLE_FAN, 8, 4);</p>

<p>```</p>

<p>还是一样的，这次我们从 cubeVertices[8] 开始。对于后面的 3 个面也是同样的方式：</p>

<p><code>
// Draw the bottom face
glColor4f(1.0, 1.0, 0.0, 1.0);
glDrawArrays(GL_TRIANGLE_FAN, 12, 4);
// Draw the left face
glColor4f(0.0, 1.0, 1.0, 1.0);
glDrawArrays(GL_TRIANGLE_FAN, 16, 4);
// Draw the right face
glColor4f(1.0, 0.0, 1.0, 1.0);
glDrawArrays(GL_TRIANGLE_FAN, 20, 4);
</code></p>

<p>我们所做的无外乎就是改变颜色，然后改变起始的偏移量。</p>

<p>现在，点一下 “Build and Go”，你可以看到一个静止的红色正方形。如果要看到 6 个面的话，我们需要让正方体绕着所有的三个轴转起来。</p>

<p>在 glLoadIdentity() 之前，加入如下赋值：</p>

<p><code>
rota += 0.5;
</code></p>

<p>我们的老朋友 rota 童鞋回来了。现在再来看看另一位老朋友，glRotatef()。在 glTranslatef() 后面，加入下面这行：</p>

<p><code>
glRotatef(rota, 1.0, 1.0, 1.0);
</code></p>

<p>之前我们只让 glRotatef() 绕着一根轴转。现在我们让它沿着三根轴一起转。</p>

<p>点下“Build and Go”，就是这个样没跑了：</p>

<p><img src="http://codeleaks.files.wordpress.com/2010/08/0601.jpg" alt="0601.jpg" title="0601.jpg" border="0" width="376" height="230"></p>

<p>代表 3D 物体对你表示惨无人道的欢迎。</p>

<h3>怎么把纹理映射上去呢？</h3>


<p>那啥，我们应该不满足于纯色的物体了对吧？让我们来用上节教程中的纹理，将它映射到物体的六个面上，这样子才好玩嘛。</p>

<p>嗯，我们还保留了上节教程中的纹理和载入代码，所以我们要做的就是改变 drawView 方法。现在你就会意识到，只要前期工作做好了，纹理映射是多简单的一件事啊！</p>

<p>首先，这是上节教程里的：</p>

<p>```
const GLshort squareTextureCoords[] = {</p>

<pre><code>// Front face
0, 1,       // top left
0, 0,       // bottom left
1, 0,       // bottom right
1, 1,       // top right
</code></pre>

<p>};
```</p>

<p>只有一个面的时候上面的代码就够了，不过现在我们需要扩展一下。当然了，这也很简单。或许你觉得刚才定义正方体的时候我们保持每个面的起点和顺序都一致很死板，不过现在你就知道为什么了。</p>

<p>当 OpenGL 把纹理渲染到正方体的面上的时候，由于我们跳过了一个偏移量（glDrawArrays() 里的 4、8、12 等）然后开始每个面的定义，纹理映射也会跳到相应的偏移处，找出每个面的纹理坐标。所以，要映射 6 个面，我们只要把上面的 4 个坐标再复制 5 遍就行了：</p>

<p>```
const GLshort squareTextureCoords[] = {</p>

<pre><code>// Front face
0, 1,       // top left
0, 0,       // bottom left
1, 0,       // bottom right
1, 1,       // top right
// Top face
0, 1,       // top left
0, 0,       // bottom left
1, 0,       // bottom right
1, 1,       // top right
// Rear face
0, 1,       // top left
0, 0,       // bottom left
1, 0,       // bottom right
1, 1,       // top right
// Bottom face
0, 1,       // top left
0, 0,       // bottom left
1, 0,       // bottom right
1, 1,       // top right
// Left face
0, 1,       // top left
0, 0,       // bottom left
1, 0,       // bottom right
1, 1,       // top right
// Right face
0, 1,       // top left
0, 0,       // bottom left
1, 0,       // bottom right
1, 1,       // top right
</code></pre>

<p>};
```</p>

<p>连郭敬明老师都表示这毫无压力！</p>

<p>现在我们需要的就是几行绘图代码，然后就可以画出我们的纹理映射过的正方形了：</p>

<p>在画第一个面之前，加入下列代码：</p>

<p><code>
glTexCoordPointer(2, GL_SHORT, 0, squareTextureCoords);
glEnableClientState(GL_TEXTURE_COORD_ARRAY);
</code></p>

<p>就是这么简单。别删掉每段绘制代码中的 glColour4f()，点一下 “Build and Go” 就可以看到了：</p>

<p><img src="http://codeleaks.files.wordpress.com/2010/08/0602.jpg" alt="0602.jpg" title="0602.jpg" border="0" width="365" height="223"></p>

<p>怎么样，会动的，有纹理映射的 3D 物体！</p>

<h3>关于纹理映射图像</h3>


<p>上节教程中忘了说了，我希望你们尝试使用你们自己的纹理图片来做映射。不过很重要的一点是，纹理图片的大小应该是 2 的 N 次方。也就是说宽度和高度必须是 1、2、4……32……512、1024……宽度和高度不一定要相等，不过它们都必须是 2 的次幂。所以 32 x 512 和 64 x 64 都是合法的大小，而 30 x 30 就不是。</p>

<h3>关于 glRotatef() 及你物体的顶点</h3>


<p>再次，我希望你们去创建自己的物体。不知道你是否注意到我总是把三角形、正方形的中心点放在 0,0,0 的位置，这样物体的端点正好被 0,0,0 等分？因为在旋转的时候，OpenGL 会沿着物体的中心点来旋转，这个中心点就是我们模型矩阵中的 0,0,0。OpenGL 不会把你的模型先调整到 0,0,0 后再旋转。如果你的物体中心点不在 0,0,0，那么它转起来的时候就会“不平衡”。</p>

<h3>今天就说这么多</h3>


<p>今天的教程就要结束了。希望你觉得这个对你有所帮助，并且和我一样能感受到它的乐趣。</p>

<p>说句事后诸葛亮的话，3D 物体的描述就应该按逆时针顺序来。现在先别想那么多，下次教程中我会讨论下逆时针和顺时针之间的细节。</p>

<p>这里是这节教程的代码：</p>

<p><a href="https://dl.dropbox.com/s/dmnyb295ufqciql/AppleCoder-OpenGLES-06.zip?dl">AppleCoder-OpenGLES-06.zip</a></p>

<p>我们下次再见。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenGL ES 05 - 纹理映射]]></title>
    <link href="http://CodeLeaks.github.com/blog/2010/08/25/opengl-es-05-texture-mapping-our-square/"/>
    <updated>2010-08-25T00:00:00+08:00</updated>
    <id>http://CodeLeaks.github.com/blog/2010/08/25/opengl-es-05-texture-mapping-our-square</id>
    <content type="html"><![CDATA[<p>原作： Simon Maurice</p>

<p>我决定把纹理映射的内容提到前面来讲，因为相比于面体（3D 物体）来说，纹理映射只涉及到单个面，理论上要简单点。同时这貌似也是很多 iPhone OpenGL ES 程序员容易卡壳的地方。所以我决定在这节教程中来说说纹理映射那点事儿。</p>

<p>之前我跳过了很多 OpenGL 的细节部分，这是为了让你们能尽早在屏幕上显示物体然后有个直观感受，而不是看些什么 OpenGL 的历史、OpenGL ES 和 OpenGL 对比之类的东西。不过今天我要讲讲之前我跳掉的这些技术细节。同时这也就意味着这会是篇很长的教程。</p>

<p>我先说在前面，我们的代码主要需要做的是把纹理载入到我们的程序中，然后传给 OpenGL 引擎以让 OpenGL 能使用它。这点不复杂，只不过需要和 iPhone SDK 打些交道。</p>

<h3>为纹理做准备</h3>


<p>在我们使用纹理之前，我们需要把它载入到应用程序中来，转成 OpenGL 需要的格式，然后告诉 OpenGl 在哪里找到它。做好了这些之后，剩下的就和上节教程中的给正方形上色一样简单。</p>

<p>启动 Xcode 并打开 EAGLView.h。首先我们需要加入一个 OpenGL 所需要的变量，如下所示：</p>

<p><code>
GLuint textures[1];
</code></p>

<p>很明显，这是一个长度为 1 的 GLuint 数组。之前你已经见过 GLfloat 了，而 GLuint 则是 OpenGL 中的另一个 typedef，表示无符号整数。我们最好保持用 GLxxxx 这样的 typedef，而不是用 Objective C 中的类型，因为 OpenGL 中的 typedef 是为了 OpenGL 实现而非开发环境而定义的。</p>

<p>接着我们用 OpenGL 的函数 glGenTextures() 来生成这个变量。现在先记得我们定义过这个变量，后面我们会讲到 glGenTexture() 和这个变量的。</p>

<p>在方法声明那里，加入如下方法声明：</p>

<p><code>
- (void)loadTexture;
</code></p>

<p>我们将把代码放在这个方法中来载入纹理。</p>

<h3>往项目中添加 CoreGraphics 框架</h3>


<p>为了载入然后处理纹理，我们需要往项目中添加一个 CoreGraphics 框架。它提供了所有我们需要的方法，因此我们不用像在 Windows OpenGL 教程里看到的那样自己去实现底层的代码。</p>

<p>在 Xcode 的 “Groups &amp; Files” 的 “Frameworks” 处右击，然后选择 Add -> Existing Frameworks。在列表中选中 CoreGraphics.framework 后点击 “Add” 加入项目中。</p>

<p>接下来我们需要添加一张纹理图片到我们的项目中。下载 checkerplate.png 然后保存到项目的目录里。右击 “Resources” 处，选择 Add -> Exisiting Files。选择我们的图片，然后它应该就会出现在我们的资源组中了。</p>

<h3>把纹理载入到我们的应用程序及 OpenGL 中</h3>


<p>切到 EAGLView.m，我们来实现 loadTexture 方法。</p>

<p><code>
- (void)loadTexture {
}
</code></p>

<p>下面的代码在这个方法中都是顺序出现的，所以我们一行一行往里面填就行了。第一件事情是用下列代码把图片载入到我们的应用程序中来：</p>

<p>```
CGImageRef textureImage = [UIImage imageNamed:@"checkerplate.png"].CGImage;
if (textureImage == nil) {</p>

<pre><code>NSLog(@"Failed to load texture image");
return;
</code></pre>

<p>}
```</p>

<p>CGImageRef 是 CoreGraphics 里的一种数据类型，它包含了所有关于图片的信息。要得到信息首先我们得用 UIImage 的类方法 imageName: 来创建一个自动释放的 UIImage 实例，UIImage 按文件名来在我们应用程序的 bundle 中找到这个文件。然后 UIImage 自动创建了 CGImageRef，我们用 CGImage 这个属性就可以访问到。</p>

<p>现在我们需要取一下图片的大小，这个在后面会用上。</p>

<p><code>
NSInteger texWidth = CGImageGetWidth(textureImage);
NSInteger texHeight = CGImageGetHeight(textureImage);
</code></p>

<p>CGImageRef 数据中包含了图像的宽度和高度，不过这两个属性不能直接访问。我们需要调用上面这两个函数。</p>

<p>正如 CGImageRef 名字所示，它并没有包含图像数据，而是一个指向图像数据的引用。所以我们需要分配出一块内存空间来保存我们的真实图像数据：</p>

<p><code>
GLubyte *textureData = (GLubyte *)malloc(texWidth * texHeight * 4);
</code></p>

<p>数据的大小应该是宽乘上高再乘上 4。上节我们讲到了 OpenGL 只认 RGBA 的颜色值，所以每个像素都要用 4 个字节来存储，每个字节对应 RGBA 中的一个值。</p>

<p>接下来的几个函数调用看起来很壮观：</p>

<p>```
CGContextRef textureContext = CGBitmapContextCreate(</p>

<pre><code>textureData,
texWidth,
texHeight,
8, texWidth * 4,
CGImageGetColorSpace(textureImage),
kCGImageAlphaPremultipliedLast);
</code></pre>

<p>CGContextDrawImage(textureContext,</p>

<pre><code>CGRectMake(0.0, 0.0, (float)texWidth, (float)texHeight),
textureImage);
</code></pre>

<p>CGContextRelease(textureContext);
```</p>

<p>第一个函数，正如它的名字所表示的，是一个 CoreGraphics 的函数，用于返回一个 Quartz2D 的图形上下文引用。我们所做的就是告诉它纹理的数据在哪，以及纹理的格式和大小分别是什么。</p>

<p>然后通过我们刚刚创建的这个图形上下文引用，我们把图像画到之前分配出来的内存空间里（textureData 指针所指向的内存）。这个上下文引用中包含所有必要的信息，让它能把数据以 OpenGL 需要的格式复制到我们用 malloc() 创建出来的空间中。</p>

<p>然后和 CoreGraphics 相关的操作就告一段落了，所以我们释放掉我们创建的 textureContext 句柄。</p>

<p>上面的这部分我们只是粗粗地过了一遍，因为我们对 OpenGL 这块更感兴趣些。来处理任何添加到你项目中的 PNG 格式图形纹理时，你都可以重用上面的代码。</p>

<p>现在，欢迎回到 OpenGL 世界。</p>

<p>还记得我们在头文件中声明的变量吗？我们准备用到它了。看看下一行代码：</p>

<p><code>
glGenTextures(1, &amp;textures[0]);
</code></p>

<p>我们要把纹理数据从我们的应用程序复制到 OpenGL 引擎那边，所以我们得让 OpenGL 分配出一块内存（我们不能直接分配）。还记得 texture[] 是定义成 GLuinit 的吗？当我们调用 glGenTextures 时，OpenGL 会创建一个“句柄”或者说“指针”。对于每个载入 OpenGL 的纹理都产生一个唯一的引用。OpenGL 返回什么值我们并不关心，只不过每次当我们要用 checkerplate.png 的时候我们间接地用到 textures[0]。我们知道我们实际上想要用的是什么，OpenGL 也知道。</p>

<p>如果需要一次性载入多个纹理，我们就多分配点空间。比方说我们的应用程序中需要 10 个纹理，我们就这么写：</p>

<p><code>
GLuint textures[10];
glGenTextures(10, &amp;textures[0]);
</code></p>

<p>在这个例子中，我们只需要一个纹理，所以我们也就只分配了一个。</p>

<p>接下来我们需要启用我们刚刚生成的纹理：</p>

<p><code>
glBindTexture(GL_TEXTURE_2D, textures[0]);
</code></p>

<p>第二个参数很明显，就是我们刚刚创建的纹理。第一个参数总是 GL_TEXTURE_2D，因为目前所有的 OpenGL ES 都只接受这个参数。“完整的” OpenGL允许 1D 或者是 3D 的纹理，但是对 OpenGL ES 来说，这个还没提上议事日程。</p>

<p>所以，记得这个是用来启用纹理的就行了。</p>

<p>接着我们把我们的纹理数据（textureData 所指的）传给 OpenGL。OpenGL 在它那边（服务器端）管理纹理数据，所以数据先要根据硬件实现转成相应格式，然后再复制到 OpenGL 的空间里。这个函数各种参数传递，不过由于 OpenGL ES 的限制，大多数参数总是不变的：</p>

<p><code>
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, texWidth, texHeight, 0, GL_RGBA, GL_UNSIGNED_BYTE, textureData);
</code></p>

<p>我们一个个地来看这些参数：</p>

<ol>
<li>目标 - 简而言之，这边总是 GL_TEXTURE_2D</li>
    <li>级别 - 指定纹理细化的级别，0 表示所有图片允许的细节，高一点的数字表示进入第 n 级的多纹理图像简化。</li>
    <li>内部格式 - 内部格式和下面列出的格式必须一致，所以都是 GL_RGBA。</li>
    <li>宽度 - 图片宽度。</li>
    <li>调试 - 图片高度。</li>
    <li>边框 - 总是设为 0，因为 OpenGL ES 不支持纹理边框。</li>
    <li>格式 - 必须与内部格式一致。</li>
    <li>类型 - 每个象素的类型。还记得每个象素是四个字节吗？所以每个象素都是一个无符号字节（时刻记得 RGBA 啊）。</li>
    <li>象素 - 指向真实图像数据的指针。</li>
</ol>


<p>所以虽然这边参数有点多，不过要么一直都不变，要么就是你之前已经输入过的变量（textureData，texWidth 和 texHeight）。我们要做的就是把纹理数据交给 OpenGL 去处理。</p>

<p>传好数据之后，我们就可以释放 textureData 了：</p>

<p><code>
free(textureData);
</code></p>

<p>现在只剩下三个函数要调用：</p>

<p><code>
glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
glEnable(GL_TEXTURE_2D);
</code></p>

<p>这三个调用做了这些最后的设置，然后让 OpenGL 进入了纹理映射的“状态”。</p>

<p>头两个调用告诉 OpenGL 在缩放的时候如何处理纹理，放大时为 GLTEXTURE_MAG_FILTER，缩小时为 GL_TEXTURE_MIN_FILTER。要让纹理映射能正常工作，你至少需要指定这两者之一。然后两种情况下都设置了 GL_LINEAR 选项。</p>

<p>然后，我们只需要调用一下 glEnable()，以便后面我们在绘制代码中能顺利地让 OpenGL 使用纹理。</p>

<p>最后，我们在 initWithCoder 函数中加入这个方法的调用。</p>

<p>```
[self setupView];
[self loadTexture]; // Add this line</p>

<p>```</p>

<p>在 setupView 方法的后面加上一行就行了。</p>

<h3>drawView 的调整</h3>


<p>脏活累活已经做完了，接下来把 drawView 方法的改变不会比前节给正方形上色难。首先，注释掉 squareColours[] 数组，因为这边我们用不上。</p>

<p>现在，回忆下我们是怎么给正方形上色的。对于每个顶点我们都提供了一个颜色值。在纹理映射中，我们也要告诉 OpenGL物体中的每一个顶点应该对应到纹理中的哪一个坐标。</p>

<p>在我们做这事情之前，我们需要知道纹理的坐标。纹理中的 (0, 0) 在左下角，沿着每条边数值分别从 0 过渡到 1。看看我们纹理的这张图：</p>

<p><img src="http://codeleaks.files.wordpress.com/2010/08/0501.png" alt="0501.png" title="0501.png" border="0" width="350" height="380"></p>

<p>回过头来看一下我们的 squareVertices[] ：</p>

<p>```
const GLfloat squareVertices[] = {</p>

<pre><code>-1.0, 1.0, 0.0,     // Top left
-1.0, -1.0, 0.0,    // Bottom left
1.0, -1.0, 0.0,     // Bottom right
1.0, 1.0, 0.0       // Top right
</code></pre>

<p>};
```</p>

<p>看到没？我们需要指定的第一个纹理坐标是左上角，也就是 (0, 1)。第二个顶点是正方形的左下角，也就是纹理坐标 (0, 0)。右下角是纹理坐标 (1, 0)，最后是右上角 (1, 1)。于是我们的 squareTextureCoods[] 应该这么写：</p>

<p>```
const GLshort squareTextureCoords[] = {</p>

<pre><code>0, 1,       // top left
0, 0,       // bottom left
1, 0,       // bottom right
1, 1        // top right
</code></pre>

<p>};
```</p>

<p>注意这边用的是 GLShort 而不是 GLfloat。把上面的代码加到你的项目中。</p>

<p>和我们在颜色数组中做的事情很像吧？</p>

<p>好的，现在我们需要改下绘图代码。三角形部分不管它，从画正方形之前的 glLoadIdentity() 开始。现在的绘图代码是这样的：</p>

<p><code>
glLoadIdentity();
glColor4f(1.0, 1.0, 1.0, 1.0);      // NEW
glTranslatef(1.5, 0.0, -6.0);
glRotatef(rota, 0.0, 0.0, 1.0);
glVertexPointer(3, GL_FLOAT, 0, squareVertices);
glEnableClientState(GL_VERTEX_ARRAY);
glTexCoordPointer(2, GL_SHORT, 0, squareTextureCoords);     // NEW
glEnableClientState(GL_TEXTURE_COORD_ARRAY);                // NEW
glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
glDisableClientState(GL_TEXTURE_COORD_ARRAY);               // NEW
</code></p>

<p>嗯，我们有四行新的代码，然后我删了上一节教程里上色的代码。第一行调用了 glColor4f()，它的作用我们放到后面慢慢说。</p>

<p>后面的三行新代码看起来应该是相当熟悉了吧。这次我们要用的不是物体的顶点，也不是颜色，我们要用的是纹理。</p>

<p><code>
glTexCoordPointer(2, GL_SHORT, 0, squareTextureCoords);     // NEW
glEnableClientState(GL_TEXTURE_COORD_ARRAY);                // NEW
</code></p>

<p>第一个调用告诉 OpenGL 我们的纹理坐标数组在哪里以及是什么格式的。和之前的区别是每个顶点有两个值（废话，这是个 2D 的纹理），然后因为我们用的 GLshort 数据类型所以这里对应地换成了 GL_SHORT。这个函数调用中没有用到步进（步进为 0），然后最后一个参数是指向我们坐标的指针。</p>

<p>然后我们让 OpenGL 以刚才我们指定的坐标数组来启用纹理映射的客户端状态。</p>

<p>glDrawArrays() 还是老样子，紧跟着的是这行：</p>

<p><code>
glDisableClientState(GL_TEXTURE_COORD_ARRAY);               // NEW
</code></p>

<p>记得上节里说过的吗？为了避免三角形受到影响，我们关掉了颜色数组。同样的，这里我们也把纹理映射关掉，否则 OpenGL 也会将纹理映射作用于三角形身上。</p>

<p>点击“Build and Go”，见证奇迹的时刻：</p>

<p><img src="http://codeleaks.files.wordpress.com/2010/08/05021.jpg" alt="0502.jpg" title="0502.jpg" border="0" width="368" height="209"></p>

<p>我们这个网纹钢板的纹理就映射到正方形上了，而三角形还是没变。</p>

<h3>进一步的实验</h3>


<p>首先，看一下我们新加进去的 glColor4f()：</p>

<p><code>
glColor4f(1.0, 1.0, 1.0, 1.0);      // NEW
</code></p>

<p>这个是把绘画颜色改成了不透明的白色。不过为什么要这么做？当然咯，OpenGL 是个“状态”机，所以除非我们设了什么值，否则它将保持同一状态。（作者你这辈子就指这句话活了吧啊啊啊？）所以在我们把颜色改成白色之前它一直是蓝色。</p>

<p>嗯，这是因为现在我们做纹理映射的时候，OpenGL 在我们当前的颜色（蓝色）和当前纹理象素之间做一个乘积，比方说：</p>

<p>```</p>

<pre><code>                   R    G     B    A
</code></pre>

<p>指定的颜色：          0.0, 0.0, 0.8, 1.0
纹理的象素颜色：      1.0, 1.0, 1.0, 1.0
```</p>

<p>当 OpenGL 画这个象素的时候，它会做这样的乘法：</p>

<p>```
颜色中的红色   *  象素中的红色        = 渲染颜色</p>

<pre><code>0.0        *     1.0              = 0.0
</code></pre>

<p>颜色中的绿色   *  象素中的绿色</p>

<pre><code>0.0        *     0.0              = 0.0
</code></pre>

<p>颜色中的蓝色   *  象素中的蓝色</p>

<pre><code>0.8        *     1.0              = 0.8
</code></pre>

<p>```</p>

<p>如果我们注释掉绘制代码前面的 glColor4f()，那么你应该会看到：</p>

<p><img src="http://codeleaks.files.wordpress.com/2010/08/05031.jpg" alt="0503.jpg" title="0503.jpg" border="0" width="372" height="194"></p>

<p>当我们设成白色的时候，我们的乘法是这样的：</p>

<p>指定的颜色： 1.0, 1.0, 1.0, 1.0 乘上
象素的颜色： 0.8, 0.8, 0.8, 1.0</p>

<p>所以我们需要把颜色改成白色。</p>

<h3>是的，就是这样了</h3>


<p>这次的教程就这样了（幸好啊，否则我要翻不动了）。我知道我写了很多，不过正像我开头说的那样，实际上纹理映射的代码也不是很多，主要还是加载和设置纹理方面的东西。下次我们来说说 3D 对象的纹理映射、混色以及其他好玩的东西。</p>

<p>老规矩，这里是代码。</p>

<p><a href="https://dl.dropbox.com/s/uz97ngiqksicg5j/AppleCoder-OpenGLES-05.zip?dl">AppleCoder-OpenGLES-05.zip</a></p>

<p>那么，下次再见咯。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenGL ES 04 - 颜色和明暗处理]]></title>
    <link href="http://CodeLeaks.github.com/blog/2010/08/23/opengl-es-04-colour-and-shading/"/>
    <updated>2010-08-23T00:00:00+08:00</updated>
    <id>http://CodeLeaks.github.com/blog/2010/08/23/opengl-es-04-colour-and-shading</id>
    <content type="html"><![CDATA[<p>原作： Simon Maurice</p>

<p>就像我上次说的那样，白色的物体看多了也就腻味了，所以是时候给它们点颜色瞧瞧了。各位看官一定要留心这次内容，因为这次我介绍的一些内容在纹理贴图那也能用得上（好吧，我们真的很快就会讲到纹理贴图了呀）。</p>

<p>OpenGL ES 中的颜色可以是一个单色的色块，也可以是带有明暗处理的多种颜色混在一起形成的渐变。单一颜色的情况比较简单，所以我们先来说说这个。</p>

<p>改变颜色会让 OpenGL 进入一个“状态”，这和 OpenGL 中的其它东西一样。改好颜色之后，所有后续的绘图操作都会用这个颜色来上色，即便是我们调用 glLoadIndentity() 来“复位”状态也无济于事（因为 glLoadIdentity() 实际上只对顶点数据有效果）。所以，只要加一行代码，我们就能让我们的物体有颜色了。现在对我来说只要不是什么颜色都好，要么我就弄个蓝色吧。</p>

<p>打开 Xcode，直奔 drawView 方法。在第一个 glLoadIdentity() 的后面加上如下方法调用：</p>

<p><code>
glLoadIdentity();
glColor4f(0.0, 0.0, 0.8, 1.0);
</code></p>

<p>我们用 glColor4f() 告诉 OpenGL，绘图（及填充）颜色为蓝色。这个方法调用的参数为：</p>

<p><code>
glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
</code></p>

<p>在 OpenGL ES 中，所有颜色必需像这样由四个参数（RGBA）组成，RGB 在这边用不上。颜色的 alpha 值指的就是透明度，1.0 表示完全不透明，而 0.0 表示完全透明。</p>

<p>同时，红、绿和蓝的参数则是从 0.0 到 1.0 的浮点数，0.0 表示颜色强度最低，而 1.0 表示颜色强度最高。所以白色表示出来就是 (1.0, 1.0, 1.0, 1.0)。</p>

<p>加上这行了之后点“Build and Go”。围观一下来自于阿凡达的三角形和正方形：</p>

<p><img src="http://codeleaks.files.wordpress.com/2010/08/0401.jpg" alt="0401.jpg" title="0401.jpg" border="0" width="370" height="239"></p>

<p>怎么样，比白色好点了吧？不过其实也就好了那么一点点而已。Apple 自带模板里的那个渐变的色彩要炫多了，所以我们也来看看该怎么实现那样的效果吧。</p>

<h3>多种颜色</h3>


<p>给一个物体加上多种颜色也不算太复杂。我们需要做的就是像定义顶点数组一样另外定义一个数组，只不过这次我们告诉 OpenGL 从数组里取的是颜色。颜色数组里的每个颜色与物体顶点数组里的每个顶点相对应。</p>

<p>动手做一下就明白了。看看下面的代码，我定义了一个颜色数组，这个数组和正方形的顶点数组相对应：</p>

<p>```
const GLfloat squareVertices[] = {</p>

<pre><code>-1.0, 1.0, 0.0,     // Top left
-1.0, -1.0, 0.0,    // Bottom left
1.0, -1.0, 0.0,     // Bottom right
1.0, 1.0, 0.0       // Top right
</code></pre>

<p>};
const GLfloat squareColours[] = {</p>

<pre><code>1.0, 0.0, 0.0, 1.0, // Red - top left - colour for squareVertices[0]
0.0, 1.0, 0.0, 1.0, // Green - bottom left - squareVertices[1]
0.0, 0.0, 1.0, 1.0, // Blue - bottom right - squareVerticies[2]
0.5, 0.5, 0.5, 1.0  // Grey - top right- squareVerticies[3]
</code></pre>

<p>};
```</p>

<p>你应该明白每个颜色对应一个顶点是什么意思了吧？接下来我们再加几行代码来给正方形上色：</p>

<p><code>
glLoadIdentity();
glTranslatef(1.5, 0.0, -6.0);
glRotatef(rota, 0.0, 0.0, -1.0);
glVertexPointer(3, GL_FLOAT, 0, squareVertices);
glEnableClientState(GL_VERTEX_ARRAY);
glColorPointer(4, GL_FLOAT, 0, squareColours);  // NEW
glEnableClientState(GL_COLOR_ARRAY);            // NEW
glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
glDisableClientState(GL_COLOR_ARRAY);           // NEW
</code></p>

<p>我们总共加了三行新代码。不要急，一行一行来看：</p>

<p><code>
glColorPointer(4, GL_FLOAT, 0, squareColours);
</code></p>

<p>这行和我们建立坐标顶点数组那个函数很像。我们传进去的四个参数分别是：</p>

<ol>
<li>颜色 - 数组中的颜色个数。</li>
    <li>数据格式 - 我们的颜色数组中用的是 0 到 1 的浮点数，所以这里我们传一个 GL_FLOAT。当然你也可以用 0 - 255 的字节来描述颜色。</li>
    <li>步进 - 同样的，如果我们数据中还有其它信息，那么我们用这个参数告诉 OpenGL 在两个值中跳过几个字节。</li>
    <li>数组 - 表明我们的数据存在哪里。</li>
</ol>


<p>注意，在指定数据格式的时候，我们用的是 GL_FLOAT，这是一个枚举类型；而 GLfloat 则是一个数据类型，用于声明 OpenGL 中的浮点数。</p>

<p>好了，现在我们的告诉了 OpenGL 数据是什么格式以及存在什么地方。不过，我们还需要让 OpenGL 进入使用颜色的“状态”。</p>

<p>于是我们用这句：</p>

<p><code>
glEnableClientState(GL_COLOR_ARRAY);
</code></p>

<p>这个打开了 OpenGL 中我们所需要的状态。我们通过传一个 GL_COLOR_ARRAY 来告诉 OpenGL 这是个颜色数组。</p>

<p>然后我们像之前那样画正方形。画好之后我们需要禁用颜色数组，否则下一次画三角形的时候也会有多种颜色。于是我们调用这句：</p>

<p><code>
glDisableClientState(GL_COLOR_ARRAY);
</code></p>

<p>这个把颜色数组从 OpenGL 的当前状态列表中移除。如果我们不这样做的话，drawView 的第一个调用会把三角形变成蓝色，而第二个调用则会用颜色数组来给三角形上色。不过由于三角形的顶点数组（triangleVertices[]）中只有三个顶点，所以它只会用颜色数组中的前三个颜色。</p>

<p>给我们的方法加入新代码之后，点击“Build and Go”来看看效果：</p>

<p><img src="http://codeleaks.files.wordpress.com/2010/08/0402.jpg" alt="0402.jpg" title="0402.jpg" border="0" width="367" height="205"></p>

<p>如果你愿意，你可以关掉旋转（注释掉 glRotatef() 那句）来看看正方形的顶点数组和颜色数组是怎么对应起来的。</p>

<h3>明暗处理</h3>


<p>注意到我们的正方形是怎么渐渐地从一种颜色变成另一种颜色的吗？OpenGL 是通过明暗处理来做到的。在 OpenGL 中有两种明暗处理模式：GL_FLAT 和 GL_SMOOTH。我们现在看到的就是默认的 GL_SMOOTH 值下的效果。</p>

<p>为了看看这两者之间的区别，我们在正方形的 glLoadIdentity() 之前加入这行：</p>

<p><code>
glShadeModel(GL_FLAT);
</code></p>

<p>glShadeModel() 函数让 OpenGL 的状态从平滑明暗处理变成了平面明暗处理。再唐僧一句，OpenGL 改变了状态后会一直保持这个状态除非再次改变这个状态。所以我们也可以把这个调用放到 setupView。点击“Build an Go”，我们的正方形现在变成这样了：</p>

<p><img src="http://codeleaks.files.wordpress.com/2010/08/04031.jpg" alt="0403.jpg" title="0403.jpg" border="0" width="367" height="170"></p>

<p>欢迎电视机前的观众朋友收看《走近科学》，接下来我们来解释下刚才发生了点什么。</p>

<p>首先我们的明暗处理并没有影响到三角形所以三角形还是老样子。而对于正方形来说，你现在可以清楚地看到组成它的两个三角形。这是因为在平面明暗处理模式下，OpenGL 仅用最后一个顶点所对应的颜色来填充每个三角形，在我们例子中也就是 squareColours[2] （蓝色）和 squareColours[3] （灰色）。如果你不知道为什么这两个颜色表示每个三角形的最后一个顶点的颜色，请复习之前我们在讲基础图形时讲到的内容。</p>

<p>我们再来看一遍：GL_SMOOTH 代表的是平滑明暗处理，这表示在填充正方形的时候，OpenGL 会用上我们之前在 squareColours[] 数组里定义的颜色并将其与顶点数组对应起来，然后用插值的方法来算出正方形内部每个象素点上的颜色，这样我们的颜色在四个点之间就能平滑变化的。这也就是我们之前看到的那个彩色正方形的样子。</p>

<p>GL_FLAT 用的是物体最后一个顶点上的颜色来填充整个物体。我们的正方形由两个三角形组成，所以我们也看到这个正方形由不同的颜色分隔成了两半。</p>

<h3>结论</h3>


<p>希望今天讲的对你有点用处。在实战中我们一般就用 GL_SMOOTH 作为我们明暗处理模式。除非你想回味一下 C64 年代里那种复古的 3D。GL_SMOOTH 是默认值，所以我们不需要手动去启用。</p>

<p>另外，请注意，我们在上面使用颜色数组的步骤在纹理映射的时候也会再用到的，所以再过一两节课我们就会倒回来看这节教程的。</p>

<p>下一讲中我会演示一下怎么创建一个 3D 的物体，它将以平面颜色着色，不过再下一讲我们就会它换成纹理。</p>

<p>好了今天的教程就是这样了，这里是代码：</p>

<p><a href="https://dl.dropbox.com/s/g7abtwvb3lu3wtk/AppleCoder-OpenGLES-04.zip?dl">AppleCoder-OpenGLES-04.zip</a></p>

<p>欲知后事如何，且听下回分解。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenGL ES 03 - 变换]]></title>
    <link href="http://CodeLeaks.github.com/blog/2010/08/21/opengl-es-03-transformations/"/>
    <updated>2010-08-21T00:00:00+08:00</updated>
    <id>http://CodeLeaks.github.com/blog/2010/08/21/opengl-es-03-transformations</id>
    <content type="html"><![CDATA[<p>原作： Simon Maurice</p>

<p>在之前的教程中我们学会了怎么画三角形和正方形，今天我们准备在屏幕上同时显示这两个物体。这只要在原来的基础上稍加移动就行了，而移动，正是变换的一种。</p>

<p>在 OpenGL ES 中有三种类型的变换，分别是：</p>

<ol>
<li>平移 - 让物体在 3D 空间中移动。</li>
    <li>旋转 - 围绕 X, Y 或 Z 轴转动。</li>
    <li>缩放 - 改变物体的大小。原本这个只是用在 2D 的正交投影系统中的，因为在 3D 中，物体越远（Z 值越小），它画出来也就越小。当然了，我们可以用缩放来实现些“特殊效果”。（喂，这有什么特殊的啊！）</li>
</ol>


<p>首先我们用平移函数来把三角形和正方形同时显示在屏幕上，然后我们再接着讲另外两个函数。</p>

<h3>平移</h3>


<p>上帝说，要移动，于是便有了 glTranslatef()。看到它尾巴上的那个“f”了吗？这说明我们要传给它的是个浮点数。这并不代表你不能使用定点数了，你大可以调用 glTranslatex() 函数。定点数用在那些没有专门的浮点数运算协处理器的硬件上，不过所幸 iPhone 还是有的，所以我们尽管放心用浮点数好了。别想太多，我只是随口提一下，以免你在 Xcode 代码补全里面看到 glTranslatex() 不知道这个有什么不同而已。</p>

<p>光说不练假把式。来，打开 Xcode ，找到你的项目。希望上次你听了我的话然后只是注释掉了画三角形的代码，否则你现在又要重新输一遍了。</p>

<p>首先要改动的是我们定义的两个顶点数组。不过只要改 Z 坐标就行了。像下面这样把所有 Z 坐标改成 0.0：</p>

<p>```
const GLfloat triangleVertices[] = {</p>

<pre><code>0.0, 1.0, 0.0,      // Triangle top centre
-1.0, -1.0, 0.0,    // bottom left
1.0, -1.0, 0.0      // bottom right
</code></pre>

<p>};
const GLfloat squareVertices[] = {</p>

<pre><code>-1.0, 1.0, 0.0,     // Top left
-1.0, -1.0, 0.0,    // Bottom left
1.0, -1.0, 0.0,     // Bottom right
1.0, 1.0, 0.0       // Top right
</code></pre>

<p>};
```</p>

<p>还记得为啥 Z 坐标要设成 -6.0 吗？因为我们的“相机”在 (0.0, 0.0, 0.0) 位置，所以我们得把物体往屏幕后方放。而现在我们准备用 glTranslatef() 来把它们往后放，而不再是在顶点数组里写死。</p>

<p>接下来我们要告诉 OpenGL 要移动的是啥：是投影（世界视角）还是物体（世界中的模型）。在这个例子中，我们要移动的是三角形和正方形，所以来和 OpenGL 打声招呼吧。在 glClear() 下面调用如下函数：</p>

<p><code>
glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
glMatrixMode(GL_MODELVIEW);
</code></p>

<p>glMatrixMode 告诉 OpenGL 我们呆会儿要改变的是我们的顶点数组而不是投影。在 setupView 方法中，我们也调过这个函数，不过那边传的是 GL_PROJECTION 参数。我们之前说过 OpenGL 是个“状态”机，所以它会一直记得之前的“状态”，直到下一次改变状态为止。在调用 glMatrixMode(GL_MODELVIEW) 之间我们的<strong>模型模式</strong>一直是 GL_PROJECTION。现在我们把它改成 GL_MODELVIEW，那么直到下次我们再做改变，它会一直保持 GL_MODELVIEW 这个值。</p>

<p>其实如果我们追求最高性能的话我们可以把这个调用放到 setupView 的末尾。不过在这个教程里就别那么认真了，古话说得好，认真你就输了……</p>

<p>对，我确实没讲过投影模式下的 OpenGL ES，所以上面的话如果你听不懂也别在意。我们现在学的目的就在于把物体画在屏幕上，然后不断去折腾它们。</p>

<p>把画三角形部分的注释去掉：</p>

<p><code>
glVertexPointer(3, GL_FLOAT, 0, triangleVertices);
glEnableClientState(GL_VERTEX_ARRAY);
glDrawArrays(GL_TRIANGLES, 0, 3);
</code></p>

<p>在这三行代码前面，加上两行新的代码：</p>

<p><code>
glLoadIdentity();
glTranslatef(-1.5, 0.0, -6.0);
glVertexPointer(3, GL_FLOAT, 0, triangleVertices);
glEnableClientState(GL_VERTEX_ARRAY);
glDrawArrays(GL_TRIANGLES, 0, 3);
</code></p>

<p>glLoadIdentity() 这个函数可以让所有的变换都复位。如果我们不调这个函数的话，glTranslatef() 就会不停地的把物体往左、往后移，直把它们移出屏幕外面。其实有更好的方法可以代替 glLoadIdentity() 的，不过这个留到后面再说吧。</p>

<p>接下来就是用来变身，呃，变换的方法啦。</p>

<p>我们的 glTranslatef() 接受三个参数：</p>

<p><code>
glTranslatef(GLfloat xtrans, GLfloat ytrans, GLfloat Ztrans);
</code></p>

<p>来，再来复习一遍之前我画的那张 3D 世界的图吧。</p>

<p><img src="http://codeleaks.files.wordpress.com/2010/08/0301.jpg" alt="0301.jpg" title="0301.jpg" border="0" width="456" height="400"></p>

<p>记住，“相机”的位置在 (0.0, 0.0, 0.0)。所以我们实际调用的时候传的参数分别是：</p>

<p><code>
xtrans = -1.5
ytrans =  0.0
ztrans = -6.0
</code></p>

<p>还有一件事情不知道你记不记得，就是当我们在画正方形和三角形的时候，它们都是出现在屏幕正中的。所以如果现在我们还是按照之前的方法来画的话，它们就会重叠在一起。</p>

<p>为了不让他们叠在一起，我把三角形的 X 坐标往左移 1.5。根据上面那张坐标系统的图，左边为负值，所以实际上就是 -1.5。</p>

<p>而 Z 轴上的 -6.0 则代替了我们之前写在顶点数组里的 -6.0。</p>

<p>于是我们就把三角形往左移了 1.5，往后移了 6.0。</p>

<h3>继续看正方形</h3>


<p>正方形部分的代码和三角形几乎是一样的：</p>

<p><code>
glLoadIdentity();
glTranslatef(1.5, 0.0, -6.0);
glVertexPointer(3, GL_FLOAT, 0, squareVertices);
glEnableClientState(GL_VERTEX_ARRAY);
glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
</code></p>

<p>只不过这一次我们给 glTranslatef() 中的 xtrans 变量传一个正值来把正方形往右移。</p>

<p>点击“Build and Go”，铛铛铛铛：</p>

<p><img src="http://codeleaks.files.wordpress.com/2010/08/0302.png" alt="0302.png" title="0302.png" border="0" width="386" height="742"></p>

<p>当然 Y 坐标还是在屏幕中间的，物体的大小和之前也是一样的，只不过它们现在已经听话地并排显示了。</p>

<h3>尝试一下</h3>


<p>试着改变 glTranslatef() 中的 xtrans、 ytrans 和 ztrans 的值，看看会发生些什么。我曾经花过几个小时观察这些值的改变。同时你也可以看看把 glLoadIndentity() 注释掉会怎么样。</p>

<h3>旋转</h3>


<p>玩好之后把代码改回来，我们接着来看看旋转。目前我们只在 2D 中旋转，因为我们的物体就是 2D 的（虽然这是个 3D 的世界）。但是我向马克思发誓后面我们会画出真正的 3D 物体来的，也让它们在 3D 中转起来，对，你猜到了，我们还会给它加上纹理的……</p>

<p>其实旋转也很简单：</p>

<p><code>
glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
</code></p>

<p>看，用 OpenGL ，就是那么自信。首先你告诉它要转多少度，然后告诉它绕着哪个轴转。</p>

<p>我会演示两种旋转。首先是静态的旋转，然后再让它们不停地旋转来产生动画效果。</p>

<p>先弄个简单的旋转出来吧。转到 drawView 方法里加入下面的代码：</p>

<p><code>
glLoadIdentity();
glTranslatef(-1.5, 0.0, -6.0);
glRotatef(45.0, 0.0, 0.0, 1.0);         // Add this line
glVertexPointer(3, GL_FLOAT, 0, triangleVertices);
glEnableClientState(GL_VERTEX_ARRAY);
glDrawArrays(GL_TRIANGLES, 0, 3);
glLoadIdentity();
glTranslatef(1.5, 0.0, -6.0);
glRotatef(45.0, 0.0, 0.0, 1.0);         // Add this line
glVertexPointer(3, GL_FLOAT, 0, squareVertices);
glEnableClientState(GL_VERTEX_ARRAY);
glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
</code></p>

<p>我们让三角形和正方形沿着 Z 轴转了 45º。看到传给 Z 的那个 1.0 吗？这告诉 OpenGL 我们的物体需要绕着 Z 轴转动。</p>

<p>点下“Build and Run”：</p>

<p><img src="http://codeleaks.files.wordpress.com/2010/08/03031.jpg" alt="0303.jpg" title="0303.jpg" border="0" width="365" height="216"></p>

<p>绕着 Z 旋转产生了一个“自转”的效果——就像我们站在汽车侧面看着轮胎转动一样。</p>

<p>沿着 X 轴转就好像在汽车的正前方看轮胎转，而沿着 Y 轴转就好像司机打了个方向盘以免撞上你（希望如此吧！）时轮胎的转动。如果你真搞不懂那也别纠结，我们下个例子可以让你看明白旋转是怎么一回事。</p>

<h3>动起来</h3>


<p>为了让我们的物体不停地转动，我们需要在每画一帧的时候都去增加旋转角度。打开 EAGLView.h，加入这个变量：</p>

<p><code>
GLfloat rota;
</code></p>

<p>回到 EAGLView.m，在 initWithCoder 的末尾加入这个赋值语句：</p>

<p><code>
rota = 0.0;
</code></p>

<p>其实我们就是加了个变量来保存当前旋转的角度。</p>

<p>回到 drawView 中，在我们第一次调用 glLoadIndentity() 之前加入下面这行：</p>

<p><code>
rota += 0.5;
</code></p>

<p>这样，我们每画一次物体就把角度增加 0.5º。最后，改一下我们对 glRotatef() 的调用：</p>

<p><code>
glRotatef(rota, 0.0, 0.0, 1.0);
</code></p>

<p>这样我们的物体就动起来了，第一次画的时候它们转了 0.5º，第二次就是 1.0º。</p>

<p>点下“Build and Run”，这就是我说的从侧面看轮胎的转动。</p>

<h3>继续尝试</h3>


<p>在今天的教程结束之前，我希望你们能动手改点代码，并且观察下我们的改动会带来些什么：</p>

<ol>
<li>改变旋转轴。把 Z 改成 0.0，然后轮流把 X 和 Y 改成 1.0，看看我们的物体分别是怎么转的。</li>
    <li>把 1.0 改成 -1.0，看看它们是不是倒过来转了。</li>
    <li>把 glRotatef() 中的 rota 改成 -rota，看看会发生什么？</li>
</ol>


<p>希望通过这样的尝试可以加深你对旋转的理解。以下是本次教程的完整代码：</p>

<p><a href="https://dl.dropbox.com/s/wccr7b5un4aq8qx/AppleCoder-OpenGLES-03.zip?dl">AppleCoder-OpenGLES-03.zip</a></p>

<p>我不知道你们是怎么想的，反正我看这些白色的物体是看腻味了。所以，下次我们要给它们上颜色了。</p>

<p>那么，下次见咯。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenGL ES 02 - 绘制基础图形2 - 正方形]]></title>
    <link href="http://CodeLeaks.github.com/blog/2010/08/17/opengl-es-02-drawing-primitives-2-squares/"/>
    <updated>2010-08-17T00:00:00+08:00</updated>
    <id>http://CodeLeaks.github.com/blog/2010/08/17/opengl-es-02-drawing-primitives-2-squares</id>
    <content type="html"><![CDATA[<p>原作： Simon Maurice</p>

<p>严格地说起来，正方形可不是 OpenGL ES 中的基础图形。不过，画这东西也不比画三角形麻烦啊。在这一篇教程中，我们将利用上一篇里的代码，把三角形变成一个正方形。同样的我们是静态地渲染出图形，但是很快我们会涉及到形变的内容哦（移来移去的）。而且只要我们做好了正方形，我们就能做正方体了，然后就是有纹理映射的正方体……呃又说远了。</p>

<h3>前情回顾及本篇提要</h3>


<p>上一讲，我们在“空白的画布”上画出了一个实心三角形。我们创建了一个顶点数组，用 glVertextPointer() 告诉 OpenGL 数据和格式，让 OpenGL 进入渲染顶点数组的状态，然后就用 glDrawArrays() 渲染出三角形。</p>

<p>今天我们要接着用这个代码来画个正方形。其实我们也仅需更换几行代码而已。首先，也是最明显的，我们要定义 4 个点而不是画三角形时的 3 个。然后我们传另一个绘图模式的参数给 glDrawArrays()，这样 OpenGL 就能画出不一样的东西了。</p>

<p>说改咱就改呀，风风火火一声吼。</p>

<h3>定义正方形的顶点</h3>


<p>打开上节教程的 Xcode 项目，转到 drawView 方法。注释掉 triangleVertices[] 常量——不过别删了，我们在后面讲形变的时候还用得上——然后加入下列代码：</p>

<p>```
const GLfloat squareVertices[] = {</p>

<pre><code>-1.0, 1.0, -6.0,            // Top left
-1.0, -1.0, -6.0,           // Bottom left
1.0, -1.0, -6.0,            // Bottom right
1.0, 1.0, -6.0              // Top right
</code></pre>

<p>};</p>

<p>```</p>

<p>这就是正方形了。看到我们是以逆时针顺序定义的没？</p>

<p>然后往下看到函数中间，注释掉画三角形的代码，同样的后面我们还会再用到这段代码的所以别删掉。注释掉 glVertexArray()、 glEnableClientState() 及 glDrawArrays() 这三个方法调用然后加入下列代码：</p>

<p><code>
glVertexPointer(3, GL_FLOAT, 0, squareVertices);
glEnableClientState(GL_VERTEX_ARRAY);
glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
</code></p>

<p>还是那三个函数，只不过有些细微的区别。</p>

<p><code>
glVertexPointer(3, GL_FLOAT, 0, squareVertices);
</code></p>

<p>这边的唯一区别是告诉 OpenGL 使用另外一组顶点数据，我们现在要画正方形而不是三角形了。</p>

<p>glEnableClientState() 还是一样的，我们告诉 OpenGL 我们要用顶点数组来绘图了（而不是颜色数组或者别的什么奇怪的东西）。</p>

<p><code>
glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
</code></p>

<p>最大的改动就是这边。在上个教程中，我们第一个参数传的是 GL_TRIANGLES ，第三个参数传的是 3 。还记得第二个参数表示的是数组中的偏移量吗？在这里仍然是 0 ，因为我们的顶点数组只包含了正方形的顶点信息。</p>

<p>第一个参数是绘图模式。我们已经见过两个了。我想花点时间讲一下绘图模式之间的区别。OpenGL 中的绘图模式有：</p>

<ul>
<li>GL_POINTS</li>
    <li>GL_LINES</li>
    <li>GL_LINE_LOOP</li>
    <li>GL_LINE_STRIP</li>
    <li>GL_TRIANGLES</li>
    <li>GL_TRIANGLE_STRIP</li>
    <li>GL_TRIANGLE_FAN</li>
</ul>


<p>由于我们还没讲到点和线，所以现在我们主要看下最后的三个。在我开始之前，我想说的是在一个顶点数组中可以有不止一个三角形，所以虽然目前我们在一个数组中仅描述一个对象，但实际上用起来并没有这种限制。</p>

<p>GL_TRIANGLES - 传这个参数表示 OpenGL 以 3 个顶点一组来遍历我们的数组。所以，数组中的前三个顶点将组成一个三角形，然后是接下去的三个，直到数组末尾。</p>

<p>GL_TRIANGLE_STRIP - OpenGL 先是使用头两个顶点，然后对于后继顶点，它都将和之前的两个顶点一起组成三角形。也就是，对于 squareVertices[6~8] 来说，它将和 squareVertices[0~2] 和 squareVertices[3~5] 组成三角形。对于 squareVertices[9~11] ，它将同 squareVertices[3~5] 及 squareVertices[6~8] 合体。以此类推。</p>

<p>注意，上边写的 squareVertices[0~2] 实际上指的是：</p>

<ul>
<li>squareVertices[0] - X 坐标 </li>
<li>squareVertices[1] - Y 坐标 </li>
<li>squareVertices[2] - Z 坐标 </li>
</ul>


<p>如果这样的解释不给力的话，我会在后面用例子来说明。</p>

<p>GL_TRIANGLE_FAN - 在头两个顶点之后，每个后继顶点将与前一个以及第一个顶点一起组成一个三角形。也就是说，对 squareVertices[6~8] 来说，它将与 squareVertices[3~5] （前一个）以及 squareVertices[0~2] （第一个）合体。</p>

<p>由于我们用的是 GL_TRIANGLES_FAN ，我们可以在屏幕上看到一个正方形。点击“Build &amp; Go”，你成功了：</p>

<p><img src="http://codeleaks.files.wordpress.com/2010/08/0201.png" alt="0201.png" title="0201.png" border="0" width="386" height="742"></p>

<p>现在回过头来看看我们的顶点数组。想象一下正方形是怎么样由三角形拼出来的。OpenGL 是这样渲染的：</p>

<ul>
<li>三角形顶点 1: squareVertices[0~2] —— 正方形左上角 </li>
<li>三角形顶点 2: squareVertices[3~5] —— 正方形左下角 </li>
<li>三角形顶点 3: squareVertices[6~8] —— 正方形右下角 </li>
</ul>


<p>OpenGL 用上面的 3 个点画一个三角形，这组成了正方形的左下半边。想象下这个正方形由一条从左上角到右下角的对角线分开，这样不就变成两个三角形了吗？OpenGL 先画了左下半边这个三角形。</p>

<p>注意，上边写的 squareVertices[0~2] 实际上指的是：</p>

<ul>
<li>squareVertices[0] - X 坐标 </li>
<li>squareVertices[1] - Y 坐标 </li>
<li>squareVertices[2] - Z 坐标 </li>
</ul>


<p>然后是：</p>

<ul>
<li>三角形顶点 1: squareVertices[9~11] —— 正方形右下角 </li>
<li>三角形顶点 2: squareVertices[6~8] —— 前一个顶点，左下角 </li>
<li>三角形顶点 3: squareVertices[0~2] —— 第一个顶点，左上角 </li>
</ul>


<p>只往里面加入了一个新的点，OpenGL 就能画出完整的正方形来了。</p>

<h3>GL_TRIANGLE_STRIP</h3>


<p>回到代码里，把 glDrawArrays() 的第一个参数从 GL_TRIANGLE_FAN 改成 GL_TRIANGLE_STRIP：</p>

<p><code>
glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
</code></p>

<p>点击“Build &amp; Go”然后你就会看到如下的图案：</p>

<p><img src="http://codeleaks.files.wordpress.com/2010/08/0202.jpg" alt="0202.jpg" title="0202.jpg" border="0" width="372" height="175"></p>

<p>我们来看一下为什么改了一个绘图模式就没有画成正方形了。OpenGL 是以下面这种方法来处理我们的顶点数据的。</p>

<ul>
<li>三角形顶点 1: squareVertices[0~2] —— 左上 </li>
<li>三角形顶点 2: squareVertices[3~5] —— 左下 </li>
<li>三角形顶点 3: squareVertices[6~8] —— 右下 </li>
</ul>


<p>OpenGL 用前三个点画了一个三角形，也就是正方形的左下半边，这与前一个例子一样。</p>

<ul>
<li>三角形顶点 1: squareVertices[9~11] —— 右上 </li>
<li>三角形顶点 2: squareVertices[6~8] —— 前一个顶点，右下 </li>
<li>三角形顶点 3: squareVertices[6~8] —— 再前一个顶点，左下 </li>
</ul>


<p>OpenGL 用这三个顶点画了一个三角形出来。在我们的例子中，这和我们想要拼成正方形的三角形比起来正好旋转了一个90º 。</p>

<p>如果我们稍微改下我们的顶点数组，我们还是可以用 GL_TRIANGLE_STRIP 来画出一个正确的正方形的。记住我们的绘图方法和顶点数组需要相匹配，否则就像我们从 FAN 改成 STRIP 那样会有奇怪的结果哦。</p>

<p>我们像下面这样改下顶点数组，记住我们现在用的是 GL_TRIANGLE_STRIP 绘图模式：</p>

<p>```
const GLfloat stripSquare[] = {</p>

<pre><code>-1.0, -1.0, -6.0,               // bottom left
1.0, -1.0, -6.0,                // bottom right
-1.0, 1.0, -6.0,                // top left
1.0, 1.0, -6.0                  // top right
</code></pre>

<p> };</p>

<p>```</p>

<p>换好代码之后，前三个点组成第一个三角形，如下所示：</p>

<p><img src="http://codeleaks.files.wordpress.com/2010/08/0203.png" alt="0203.png" title="0203.png" border="0" width="400" height="400"></p>

<p>现在通过指定右上的顶点后（P4），它将同左上顶点（P3）以及再前面一个右下顶点（P2）一同组成三角形。新的顶点以橙色、绿色和红色表示（原文中确实写的是顶点，可 Simon 大神您画的这是边吧！）：</p>

<p><img src="http://codeleaks.files.wordpress.com/2010/08/02041.png" alt="0204.png" title="0204.png" border="0" width="400" height="400"></p>

<p>我们的最终产物同样是个正方形。所以，没什么不同的，只要记住，绘图模式和提供的顶点信息之间相互匹配就可以了。</p>

<h3>最后…</h3>


<p>三角形和正方形你都已经见过了。还剩下点和线没讲。这两个都很简单，我们会在后面提到。然后下一次我们也会给现在画出来的东西填上颜色。</p>

<p>一旦填上了颜色，我们就要让它们动起来了，然后就把纹理什么的贴在它们身上，嗯哼。当然这不会是 Doom 3 ，不过你也能开始创建 3D 的对象了啊。到那时候我会开始讲 3D 世界的。</p>

<p>这里是源代码：</p>

<p><a href="https://dl.dropbox.com/s/fmxjn4kqpn6o2s2/AppleCoder-OpenGLES-02.zip?dl">AppleCoder-OpenGLES-02.zip</a></p>

<p>那么，下次见咯。</p>
]]></content>
  </entry>
  
</feed>
